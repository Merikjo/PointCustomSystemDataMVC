@using DayPilot.Web.Mvc;
@using DayPilot.Web.Mvc.Enums.Calendar;
@model IEnumerable<PointCustomSystemDataMVC.ViewModels.ReservationViewModel>

@{
    ViewBag.Title = "Index";
}
@section scripts {
    <script src="~/Scripts/daypilot-all.min.js"></script>
    <script src="~/Scripts/DayPilot/daypilot-calendar.src.js"></script>
    <script src="~/Scripts/DayPilot/daypilot-all.min.js"></script>

    <script src="~/Scripts/DataTables/jquery.dataTables.js"></script>
    <script src="~/Scripts/DataTables/dataTables.bootstrap.js"></script>

    <script type="text/javascript">
        // oma filtteröintifunktio varauksille (=Palvelusuoritus), jotka on jo suoritettu
        $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
            // luetaan valintaruudun asetus
            var showCompleted = $("#showCompletedReservationsCheckbox").is(":checked");

            // luetaan 10. solun arvo: tämä on "Palvelusuoritus"
            var reservationComplete = settings.aoData[dataIndex].anCells[10].children[0].checked;

            /* Jos käyttäjä on valinnut asetuksen "Näytä kaikki palvelusuoritukset", otetaan listalle
             * mukaan myös valmistuneet suoritukset. Muussa tapauksessa (oletusarvo) ei näytetä.
             * Tämän funktion paluuarvo kertoo, näytetäänkö rivi taulukossa vai ei. */
            if (showCompleted) {
                // näytetään kaikki varaukset, myös valmistuneet =true;
                return true;
            }
            else {
                if (reservationComplete) {
                    // ei näytetä valmistuneita varauksia =false;
                    return false;
                }
                else {
                     // muutoin =true;
                    return true;
                }
            }
        });

        $(function () {
            // sivun alustus
            //alert("Sivun alustus");
            var varausTaulu = $("#reservationsTable").DataTable();

            $("#showCompletedReservationsCheckbox").change(function () {
                // kun käyttäjä napsauttaa valintaruutua, päivitetään varaustaulukko
                varausTaulu.draw();
            });
        });

        //// oma filtteröintifunktio maksuille, joita ei ole vielä suoritettu
        //$.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
        //    // luetaan valintaruudun asetus
        //    var showNotPaid = $("#showNotPaidCheckbox").is(":checked");

        //    // luetaan 11. solun arvo: tämä on "Maksettu"
        //    var treatmentPaid = settings.aoData[dataIndex].anCells[11].children[0].checked;

        //    /* Jos käyttäjä on valinnut asetuksen "Näytä kaikki maksetut / maksamattomat", otetaan listalle
        //     * mukaan myös maksetut suoritukset. Muussa tapauksessa (oletusarvo) ei näytetä.
        //     * Tämän funktion paluuarvo kertoo, näytetäänkö rivi taulukossa vai ei. */
        //    if (showNotPaid) {
        //        // näytetään kaikki varaukset, myös maksetut
        //        return true;
        //    }
        //    else {
        //        if (treatmentPaid) {
        //            // ei näytetä maksettuja hoitoja
        //            return true;
        //        }
        //        else {
        //            return false;
        //        }
        //    }
        //});

        //$(function () {
        //    // sivun alustus
        //    //alert("Sivun alustus");
        //    var varausTaulu = $("#reservationsTable").DataTable();

        //    $("#showNotPaidCheckbox").change(function () {
        //        // kun käyttäjä napsauttaa valintaruutua, päivitetään varaustaulukko
        //        varausTaulu.draw();
        //    });
        //});

    // SCRIPT MODAL KALENTERINÄKYMÄ:
    function create(start, end) {
        var m = new DayPilot.Modal();
        modal.top = 60;
        modal.width = 500;
        modal.opacity = 70;
        modal.border = "10px solid #d0d0d0";
        m.closed = function () {
            if (this.result == "OK") {
                db.commandCallBack('refresh');
            }
            db.clearSelection();
        };
        modal.height = 500;
        modal.zIndex = 100;
        m.showUrl('@Url.Action("Create", "Reservations")?start=' + start + '&end=' + end);
    }

    //Eventin editointi, lomakkeen aukaisu
    function editEvent(id) {
        var modal = new DayPilot.Modal();
        modal.top = 60;
        modal.width = 400;
        modal.opacity = 70;
        modal.border = "10px solid #d0d0d0";
        modal.closed = function () {
            if (this.result == "OK") {
                db.commandCallBack('refresh');
            }
            db.clearSelection();
        };
        modal.height = 500;
        modal.zIndex = 100;
        modal.showUrl("/Reservations/Edit/" + id);

    }

    // event creating MODAL
    //dp.onTimeRangeSelected = function (args) {
    //    create();
    //    dp.update();
    //};
    //var modal = new DayPilot.Modal({
    //    onClosed: function (args) {
    //        console.log("Modal dialog closed");
    //    },
    //    // ...
    //});
    //var nav = new DayPilot.Navigator("nav");
    //nav.locale = "fi-fi";
    //nav.showMonths = 1;
    //nav.selectMode = "week";
    //nav.onTimeRangeSelected = function (args) {
    //    dp.startDate = args.start;
    //    dp.update();
    //    //JSON kysely
    //    LoadEvents(dp.visibleStart(), dp.visibleEnd());
    //};
    //nav.init();
    //muokattu 24.2.2017
    //var dp = new DayPilot.Calendar("dpc");
    //dp.locale = "fi-fi";
    //dp.allowEventOverlap = false;
    //dp.viewType = "Week";
    //dp.init();
    // event creating
    //dp.onTimeRangeSelected = function (args) {
    //    var name = prompt("New event name:", "Event");
    //    dp.clearSelection();
    //    if (!name) return;
    //    var e = new DayPilot.Event({
    //        start: args.start,
    //        end: args.end,
    //        id: DayPilot.guid(),
    //        resource: args.resource,
    //        text: name
    //    });
    //    dp.events.add(e);
    //    alert("Created");
    //};
    //modal.showUrl("Edit.aspx");
    //var modal = new DayPilot.Modal({
    //    onClosed: function (args) {
    //        console.log("Modal dialog closed");
    //    },
    //    // ...
    //});
    //modal.showHtml("<h1>Hello</h1>");
    //dp.onEventClicked = function (args) {
    //    //formatted = $.datepicker.formatDate("M d, yy", new Date("2014-07-08T09:02:21.377"));
    //    var startDate = new Date(args.e.start());
    //    var endDate = new Date(args.e.end());
    //    var hour = "" + startDate.getHours(); if (hour.length == 1) { hour = "0" + hour; }
    //    var minute = "" + startDate.getMinutes(); if (minute.length == 1) { minute = "0" + minute; }
    //    //var sD = (startDate.getMonth() + 1) + '.' + startDate.getDate() + '.' + startDate.getFullYear() + " " + hour + ":" + minute;
    //    var sD = startDate.getDate() + '.' + (startDate.getMonth() + 1) + '.' + startDate.getFullYear() + " " + hour + ":" + minute;
    //    var minute = "" + endDate.getMinutes(); if (minute.length == 1) { minute = "0" + minute; }
    //    //var eD = (endDate.getMonth() + 1) + '.' + endDate.getDate() + '.' + endDate.getFullYear() + " " + hour + ":" + minute;
    //    var eD = endDate.getDate() + '.' + (endDate.getMonth() + 1) + '.' + endDate.getFullYear() + " " + hour + ":" + minute;
    //    editEvent(args.e.data.ID);
    //    //alert("Event clicked: Alku: " + sD + " Loppu: " + eD);
    //    //alert( dp.visibleStart().toString() + " - " + dp.visibleEnd().toString() );
    //};
    //Lisätty 25.2.2017: convert date "2010-01-01T00:00:00" to "2010-01-01"
    //function ConvertDate2(date) {
    //    var month = date.getMonth() + 1;
    //    if (month < 10) { month = "0" + month };
    //    var day = date.getDay();
    //    if (day < 10) { day = "0" + day };
    //    var year = date.getYear();
    //    if (year < 10) { year = "0" + year };
    //    var date = year + "-" + month + "-" + day;
    //    return date;
    //}
    //event creating
    //var e = new DayPilot.Event({
    //    date: new DayPilot.Date("2017-03-21"),
    //    start: new DayPilot.Start("HH\:mm"),
    //    end: new DayPilot.End("HH\:mm"),
    //    id: DayPilot.guid(),
    //    text: "EKA"
    //});
    //dp.events.add(e);
    //alert("Created");
    //var e = new DayPilot.Event({
    //    date: new DayPilot.Date("2017-03-21"),
    //    start: new DayPilot.Date("HH\:mm"),
    //    end: new DayPilot.Date("HH\:mm"),
    //    id: DayPilot.guid(),
    //    text: "TOKA"
    //});
    //Lisätty 25.3.2017
    //function AddZero(t) {
    //    if (t < 10) { t = "0" + t };
    //    return t;
    //}
    //Lisätty 25.3.2017
    //function UpdateEvent(args) {
    //    a = new Date(args.e.Start());
    //    l = new Date(args.e.End());
    //    var startTime = AddZero(a.getHours()) + ":" + AddZero(a.getMinutes());
    //    var endTime = AddZero(l.getHours()) + ":" + AddZero(l.getMinutes());
    //    d = a.getFullYear() + "-" + AddZero(a.getMonth() + 1) + "-" + AddZero(a.getDate());
    //    url = "/Reservations/Resize/?id=" + args.e.data.ID + "&Date=" + d + "&newStart=" + startTime + "&newEnd=" + endTime;
    //    $.ajax({ url: url, cache: false }).done(function (data) {
    //        //alert(data);
    //    });
    //}
    //Lisätty 22.2.2017
    //function LoadEvents(Start, End) {
    //    url = "/Reservations/Backend/?start=" + start + "&end=" + end;
    //    //alert("AJAX url: " + url);
    //    $.ajax({ url: url, cache: false }).done(function (data) {
    //        i = 0;
    //        //alert("JSON objects: " + data);
    //        for (var i = 0; i < data.length; i++) {
    //            data[i].Date = ConvertDate(data[i].Date);
    //            data[i].Start = data[i].Start;
    //            data[i].End = data[i].End;
    //            data[i].start = data[i].Date.substr(0, 11) + data[i].Start + ":00";
    //            data[i].end = data[i].Date.substr(0, 11) + data[i].End + ":00";
    //            data[i].Text = "CalendarTitle";
    //            //alert("Reservation start: " + data[i].start + " Reservation end: " + data[i].end);
    //            var Date = new Date(data[i].Date);
    //            //alert("varauksen pvm: " + data[i].Date + " startTime:" + data[i].Start + " End:" + data[i].End + " sisältö: " + data[i].text)
    //        }
    //        //alert("luodaan varaus kalenteriin: " + i);
    //        Create(data);
    //    });
    //}
</script>
    
}

@section head {
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <link href="~/Scripts/DataTables/datatables.css" rel="stylesheet" />
    <link href="~/Scripts/DataTables/dataTables.bootstrap.css" rel="stylesheet" />

    <style>
        #weekcalendar {
            width: 1200px;
        }
    </style>
}
<title>PointCollege Ajanvarausohjelmisto</title>



<!-- !SIDEMENU CONTENT!
================================================== -->
@{ Html.RenderAction("SideMenu", "Customers");}

<!-- !PAGE CONTENT!
================================================== -->
<div class="w3-main" style="margin-left:252px">

    <!-- Push down content on small screens -->
    <div class="w3-hide-large" style="margin-top:83px"></div>

<!-- !CONTAINER!
================================================== -->
    <div class="w3-container">

<!-- !KALENTERINÄKYMÄ!
================================================== -->

        <h2>VARAUSKALENTERI</h2>
        <p>Viikko</p>

        <div id="weekcalendar">
            <div id="dpc" class="w3-text-grey calendar_default_main">

                @Html.DayPilotCalendar("dpc", new DayPilotCalendarConfig
           {
               BackendUrl = Url.Content("~/Reservations/BackEnd"),

               ViewType = DayPilot.Web.Mvc.Enums.Calendar.ViewType.WorkWeek,
               CssOnly = true,
               //CssClassPrefix = "calendar_white",
               EventMoveHandling = DayPilot.Web.Mvc.Events.Calendar.EventMoveHandlingType.CallBack,
               EventResizeHandling = DayPilot.Web.Mvc.Events.Calendar.EventResizeHandlingType.CallBack,
               EventClickHandling = DayPilot.Web.Mvc.Events.Calendar.EventClickHandlingType.JavaScript,
               EventClickJavaScript = "edit" +
               "Event(e.id())",
               TimeRangeSelectedHandling = DayPilot.Web.Mvc.Events.Calendar.TimeRangeSelectedHandlingType.JavaScript,
               TimeRangeSelectedJavaScript = "create(start,end)",
               HeightSpec = HeightSpec.BusinessHours,
           })
                <br />
                <div class="space">
                    Viikko:
                    <a href="javascript:dpc.commandCallBack('previous');">Edellinen</a>
                    <a href="javascript:dpc.commandCallBack('next');">Seuraava</a>
                </div>
            </div>
        </div>
        @*<p>
                @Html.ActionLink("Kuukausikalenteri", "BackMonthEnd")
            </p>*@
        <p>&nbsp;</p>
        <hr />

        <h2>Palveluvaraus</h2>
        <p>Varauksia yhteensä: @Model.Count()</p>

        <p><a href="/Reservations/Create" class="w3-btn w3-large">Uusi palveluvaraus</a></p>
        <p><a href="~/Reservations/HoursPerReservationAsExcel" class="w3-btn w3-grey disabled">Asiakastiedot Exceliin</a></p>

        <p>&nbsp;</p>

        <p>Näytä kaikki palvelusuoritukset: <input id="showCompletedReservationsCheckbox" type="checkbox" /></p>
        @*<p>Näytä kaikki maksetut / maksamattomat: <input id="showNotPaidCheckbox" type="checkbox" /></p>*@
        <p>&nbsp;</p>
    <table class="table" id="reservationsTable">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.UserIdentity)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FirstNameA)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.LastNameA)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.TreatmentName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.TreatmentPlaceName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Date)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Start)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.End)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FullNameH)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Note)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.TreatmentCompleted)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.TreatmentPaid)
                    </th>
                 

                    <th></th>
                </tr>
            </thead>
            <tbody>

                @foreach (var item in Model)
            {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.UserIdentity)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FirstNameA)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.LastNameA)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.TreatmentName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.TreatmentPlaceName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Date)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Start)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.End)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.FullNameH)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Note)
                        </td>
                        <td>
                            @{
                                string Treat = "";
                                if (item.TreatmentCompleted.HasValue && (item.TreatmentCompleted.Value == true))
                                {
                                    Treat = "checked";
                                }
                            }
                            <input name="TreatmentCompelted" type="checkbox" @Treat/>
                            @* @Html.DisplayFor(modelItem => item.TreatmentCompleted)*@
                        </td>
                        <td>
                            @{
                                string Paid = "";
                                if (item.TreatmentPaid.HasValue && (item.TreatmentPaid.Value == true))
                                {
                                    Paid = "checked";
                                }
                            }
                            <input name="TreatmentPaid" type="checkbox" @Paid />
                            @*@Html.DisplayFor(modelItem => item.TreatmentPaid)*@
                        </td>
                  

                        <td>
                            @Html.ActionLink("Muokkaa", "Edit", new { id = item.Reservation_id }) |
                            @*@Html.ActionLink("Tiedot", "Details", new { id = item.Reservation_id }) |*@
                            @Html.ActionLink("Poista", "Delete", new { id = item.Reservation_id }) |
                            <br><br>
                            @Html.ActionLink(item.FirstNameA + " " + item.LastNameA, "Details", "Reservations", new { id = item.Reservation_id }, new { @class = "w3-btn btn-success w3-grey w3-small" })
                            <br><br>
                            @Html.ActionLink("Palveluraportti", "TreatText", new { id = item.Reservation_id }, new { @class = "w3-btn btn-success w3-grey w3-small" })
                            <br><br>
                            @Html.ActionLink("Maksukuittaus", "TreatPayment", new { id = item.Reservation_id }, new { @class = "w3-btn btn-success w3-grey w3-small" })
                            <br><br>
                            @Html.ActionLink("Palvelukuittaus", "ReservationCompleted", new { id = item.Reservation_id }, new { @class = "w3-btn btn-success w3-grey w3-small" })
                        </td>
                    </tr>
                                }
            </tbody>
        </table>

    </div> <!-- End content -->
</div><!-- End page content -->
